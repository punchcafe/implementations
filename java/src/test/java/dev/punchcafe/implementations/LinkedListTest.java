/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dev.punchcafe.implementations;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class LinkedListTest {

    private LinkedList<String> linkedList;

    @BeforeEach
    void beforeEach() {
        linkedList = new LinkedList<>("Hello");
    }

    @Test
    void canAppendToWithList() {
        LinkedList<String> arglessLinkedList = new LinkedList<>();
        arglessLinkedList.add("Hello");
        arglessLinkedList.add("world");
        arglessLinkedList.add("!");

        assertEquals("Hello", arglessLinkedList.get(0));
        assertEquals("world", arglessLinkedList.get(1));
        assertEquals("!", arglessLinkedList.get(2));
    }

    @Test
    void canAppendToWithWhenInitialisedWithArgList() {
        linkedList.add("world");
        linkedList.add("!");

        assertEquals("Hello", linkedList.get(0));
        assertEquals("world", linkedList.get(1));
        assertEquals("!", linkedList.get(2));
    }

    @Test
    void canRetrieveSize() {
        linkedList.add("world");
        linkedList.add("!");
        assertEquals(linkedList.size(), 3);
        LinkedList<Integer> zeroArgsInitList = new LinkedList<>();
        zeroArgsInitList.add(1);
        zeroArgsInitList.add(2);
        assertEquals(zeroArgsInitList.size(), 2);
    }

    @Test
    void canDeleteFromList() {
        linkedList.add("world");
        linkedList.add("!");
        assertEquals("world", linkedList.get(1));
        linkedList.delete(1);
        assertEquals("!", linkedList.get(1));
    }

    @Test
    void canDeleteFromListAndReturnCurrectSize() {
        linkedList.add("world");
        linkedList.add("!");
        assertEquals("world", linkedList.get(1));
        assertEquals(linkedList.size(), 3);
        linkedList.delete(1);
        assertEquals("!", linkedList.get(1));
        assertEquals(linkedList.size(), 2);
    }

    //@Test
    void canDeleteFromListWithEdgeCases() {
        linkedList.delete(0);
        assertEquals("!", linkedList.get(0));
    }

    @Test
    void isEmptyTest() {
        LinkedList<String> arglessLinkedList = new LinkedList<>();
        assertTrue(arglessLinkedList.isEmpty());
        arglessLinkedList.add("Hello there");
        assertFalse(arglessLinkedList.isEmpty());
    }

    @Test
    void containsTest() {
        linkedList.add("world");
        linkedList.add("!");
        assertTrue(linkedList.contains("world"));
        assertFalse(linkedList.contains("worl"));
        assertFalse(linkedList.contains(5));
    }

    @Test
    void equalsTest() {
        //assertTrue();
    }
}
